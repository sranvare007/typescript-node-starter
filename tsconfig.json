{
  "compilerOptions": {
    "target": "ES6" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "lib": [
      "dom",
      "esnext"
    ] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
    "module": "commonjs" /* Specify what module code is generated. */,
    "rootDir": "." /* Specify the root folder within your source files. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "baseUrl": "." /* Specify the base directory to resolve non-relative module names. */,
    "paths": {
      "@config/*": ["src/config/*"],
      "@constants/*": ["src/constants/*"],
      "@controller/*": ["src/controller/*"],
      "@helper/*": ["src/helper/*"],
      "@interfaces/*": ["src/interfaces/*"],
      "@middleware/*": ["src/middleware/*"],
      "@models/*": ["src/models/*"],
      "@routes/*": ["src/routes/*"],
      "@service/*": ["src/service/*"],
      "@utils/*": ["src/utils/*"]
    },
    "resolveJsonModule": true /* Enable importing .json files. */,
    "outDir": "dist" /* Specify an output folder for all emitted files. */,
    "removeComments": true /* Disable emitting comments. */,
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
    "strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
    "strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "useUnknownInCatchVariables": true /* Default catch clause variables as 'unknown' instead of 'any'. */,
    "noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
    "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
    "exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "ts-node": {
    "files": true
  },
  "exclude": ["node_modules", "dist", "coverage"],
  "include": [
    "src/**/*.ts",
    "**/src/**/*.ts",
    "**/__tests__/**/*.ts",
    "src/**/*.d.ts"
  ]
}
